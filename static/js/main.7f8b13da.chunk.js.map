{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Cards.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","firstName","lastName","name","className","alt","src","CardList","cards","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Cards","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","cardList","filteredCards","filter","toLowerCase","startsWith","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7f8b13da.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Card = ({firstName, lastName}) => {\r\n\tlet name = firstName+lastName;\r\n\treturn(\r\n\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \r\n\t\t<img  alt='robots' src={'https://robohash.org/'+name+'?100x100'}/>\r\n\t\t<div>\r\n\t\t\t<h2 className='tc'> {firstName} </h2>\r\n\t\t\t<p className='tc'> {firstName}.{lastName}@gmail.com </p>\r\n\t\t</div>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({cards}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tcards.map((user , i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tfirstName={cards[i].firstName} \r\n\t\t\t\t\t\tlastName={cards[i].lastName}\r\n\t\t\t\t\t\tkey = {i}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t  \t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t  <input\r\n\t\t\t className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t type='search'\r\n\t\t\t placeholder='search robots' \r\n\t\t\t onChange={searchChange}\r\n\t\t  />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Cards = [\r\n{\r\n\tfirstName : 'Jane',\r\n\tlastName : 'Doe'\r\n},\r\n{\r\n\tfirstName : 'David',\r\n\tlastName : 'Smith'\r\n},\r\n{\r\n\tfirstName : 'Meni',\r\n\tlastName : 'Grossman'\r\n},\r\n{\r\n\tfirstName : 'Naama',\r\n\tlastName : 'Bauer'\r\n}\r\n\r\n];\r\n\r\nexport default Cards;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tstate = {\r\n\t\thasError: false\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1> oops. Sorry about that... </h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Cards from '../components/Cards';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      cardList: Cards,\n      searchfield:''\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield : event.target.value }) \n    \n  }\n\n  render(){\n    const filteredCards = this.state.cardList.filter(Cards =>{\n      return Cards.firstName.toLowerCase().startsWith(this.state.searchfield.toLowerCase());\n    });\n    return (\n      <div className='tc'>\n        <h1> RoboFriends </h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry >\n            <CardList cards={filteredCards}/>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}